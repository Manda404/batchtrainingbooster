name: CI - BatchTrainingBooster

on:
  push:                       # 🚀 Lancement sur push
    branches: [ main, feature/* ]
  pull_request:               # 🔁 Lancement sur PR
    branches: [ main ]

jobs:
  tests:
    runs-on: ubuntu-latest    # 🐧 Runner GitHub (Linux)

    steps:
      # 1) 📂 Récupération du code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2) 🐍 Installation de Python (3.11, comme ton pyproject.toml)
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # 3) ☕ Installation de Java (nécessaire pour PySpark)
      - name: Set up Java 11
        uses: actions/setup-java@v4
        with:
          distribution: temurin   # OpenJDK Temurin (stable et gratuit)
          java-version: "11"

      # 4) 📦 Installation de Poetry
      - name: Install Poetry
        uses: abatilo/actions-poetry@v3
        with:
          poetry-version: "1.8.3"

      # 5) ⚙️ Configuration de l'environnement virtuel Poetry
      - name: Configure Poetry virtualenv
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
          poetry --version

      # 6) 🧠 Mise en cache du venv + dépendances Poetry
      - name: Cache Poetry and venv
        uses: actions/cache@v4
        with:
          path: |
            .venv
            ~/.cache/pypoetry
          key: ${{ runner.os }}-py311-poetry1.8.3-${{ hashFiles('**/poetry.lock') }}-v3
          restore-keys: |
            ${{ runner.os }}-py311-poetry1.8.3-

      # 7) 📥 Installation des dépendances + ton package (src layout)
      - name: Install dependencies (with dev)  # ✅ Ajout : installe aussi le groupe dev (ruff, black, mypy)
        run: poetry install --no-interaction --no-ansi --no-root --with dev

      # 8) 🎨 Vérification qualité du code (formatage → lint → types)
      - name: Run code quality checks
        run: |
          echo "🎨 Vérification du formatage avec Black..."
          poetry run black --check src tests
          
          echo "🎨 Vérification du formatage avec Ruff..."
          poetry run ruff format --check src tests
          
          echo "🔍 Vérification du linting avec Ruff..."
          poetry run ruff check src tests
          
          echo "🏷️  Vérification des types avec mypy..."
          poetry run mypy --explicit-package-bases --ignore-missing-imports src  # ✅ Ajout : ignore les imports manquants (ex: PySpark)

      # 9) 🧪 Lancement des tests unitaires avec PySpark + pytest
      - name: Run unit tests
        env:
          PYSPARK_PYTHON: python  # Simplifié - Poetry gère déjà l'env
          SPARK_LOCAL_IP: 127.0.0.1
          # Évite les warnings PySpark en CI
          PYTHONPATH: ${{ github.workspace }}/src
        run: poetry run pytest -v --maxfail=1 --disable-warnings
